// Copyright (c) 2012 The LevelDB Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file. See the AUTHORS file for names of contributors.

#include "leveldb/filter_policy.h"

#include "leveldb/slice.h"
#include "util/hash.h"
//觉得这个filter没有必要存放在磁盘上而应该全部在内存上面。 
//但是leveldb会针对若干个data block生成一个filter存放在磁盘上面。如果是这样接口就非常好理解了， 
//将所有的filter全部聚合在连续的内存上面写入table. 

namespace leveldb {

namespace {

//根据key来hash出一个uint32_t
static uint32_t BloomHash(const Slice& key) {
  return Hash(key.data(), key.size(), 0xbc9f1d34);
}


class BloomFilterPolicy : public FilterPolicy {
 private:
  size_t bits_per_key_; //对每个key用几个位
  size_t k_; //进行几次hash，即用几次检测点
  
 public:
  //最少用1位检测，最多用30位检测，正好1个字节可以放下k_
  explicit BloomFilterPolicy(int bits_per_key)
      : bits_per_key_(bits_per_key) {
    // We intentionally round down to reduce probing cost a little bit
    k_ = static_cast<size_t>(bits_per_key * 0.69);  // 0.69 =~ ln(2)
    if (k_ < 1) k_ = 1;
    if (k_ > 30) k_ = 30;
  }

  virtual const char* Name() const {
    return "leveldb.BuiltinBloomFilter2";
  }

  //对n个keys，经过bloom filter计算出一些位，追加到dst的尾部
  virtual void CreateFilter(const Slice* keys, int n, std::string* dst) const {
    // Compute bloom filter size (in both bits and bytes)
    //bloom-filter数据共需要bits位，n个key，每个key占bits_per_key位
    size_t bits = n * bits_per_key_;

    // For small n, we can see a very high false positive rate.  Fix it
    // by enforcing a minimum bloom filter length.
    //bloom-filter最少用64位数据
    if (bits < 64) bits = 64;

    //将bits round up到8的倍数，需要的bit数目。bytes即用几字节的bloom filter数据
    size_t bytes = (bits + 7) / 8;
    bits = bytes * 8;

    const size_t init_size = dst->size();
    dst->resize(init_size + bytes, 0); //在dst后面添加bytes字节的bloom filter数据, bloom filter数据初始化为0
    dst->push_back(static_cast<char>(k_));  // Remember # of probes in filter，将k次检测作为1个字节加入dst的尾部
    char* array = &(*dst)[init_size]; //bloom-filter数据的起始地址
    //对n个key来计算bloom-filter
    for (int i = 0; i < n; i++) {
      // Use double-hashing to generate a sequence of hash values.
      // See analysis in [Kirsch,Mitzenmacher 2006].
      uint32_t h = BloomHash(keys[i]); //第i个key hash出来的uint32_t h
      const uint32_t delta = (h >> 17) | (h << 15);  // Rotate right 17 bits //对hash value再做一次转换
      //设置k次，每次找到一个位置，然后设置该位置。
      for (size_t j = 0; j < k_; j++) {
        const uint32_t bitpos = h % bits;
        array[bitpos/8] |= (1 << (bitpos % 8));
        h += delta;
      }
    }
  }

  virtual bool KeyMayMatch(const Slice& key, const Slice& bloom_filter) const {
    const size_t len = bloom_filter.size(); //这个bloom-filter数据长度
    if (len < 2) return false;

    const char* array = bloom_filter.data();
    const size_t bits = (len - 1) * 8; //bloom-filter数据有多少位，减1因为bloom-filter数据最后1字节放的是”k次检测“
    // Use the encoded k so that we can read filters generated by
    // bloom filters created using different parameters.
    const size_t k = array[len-1];
    if (k > 30) {
      // Reserved for potentially new encodings for short bloom filters.
      // Consider it a match.
      return true;
    }

    uint32_t h = BloomHash(key);
    const uint32_t delta = (h >> 17) | (h << 15);  // Rotate right 17 bits
    for (size_t j = 0; j < k; j++) {
      const uint32_t bitpos = h % bits;
      if ((array[bitpos/8] & (1 << (bitpos % 8))) == 0) return false;
      h += delta;
    }
    return true;
  }
};
}

const FilterPolicy* NewBloomFilterPolicy(int bits_per_key) {
  return new BloomFilterPolicy(bits_per_key);
}

}  // namespace leveldb
